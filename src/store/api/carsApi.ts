// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"
import { FormData } from "../../types/formTypes"

interface Quote {
  id: number
  quote: string
  author: string
}

interface QuotesApiResponse {
  quotes: Quote[]
  total: number
  skip: number
  limit: number
}

interface TestResponse {
  message: string
}

// Define a service using a base URL and expected endpoints
export const carsApi = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: "http://localhost:4000/api" }),
  reducerPath: "carsApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["Cars"],
  endpoints: build => ({
    // Supply generics for the return type (in this case `QuotesApiResponse`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    // getQuotes: build.query<QuotesApiResponse, number>({
    //   query: (limit = 10) => `?limit=${limit}`,
    //   // `providesTags` determines which 'tag' is attached to the
    //   // cached data returned by the query.
    //   providesTags: (result, error, id) => [{ type: "Cars", id }],
    // }),
    getHome: build.query<TestResponse, void>({
      query: () => "/",
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: [{ type: "Cars" }],
    }),
    postPublishCarForm: build.mutation<TestResponse, FormData>({
      query: formData => ({
        url: "/publish",
        method: "POST",
        body: formData,
      }),
    }),
  }),
})

// Hooks are auto-generated by RTK-Query
// Same as `carsApiSlice.endpoints.getQuotes.useQuery`
export const { useGetHomeQuery, usePostPublishCarFormMutation } = carsApi
